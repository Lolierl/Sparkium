#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_ray_query : enable

#include "entity_metadata.glsl"
#include "material.glsl"
#include "mesh_metadata.glsl"
#include "ray_payload.glsl"
#include "scene_settings.glsl"

Material material;

layout(set = 0, binding = 0, std140) uniform SceneSettingsUniform {
  SceneSettings scene_settings;
};

layout(set = 0, binding = 1, std430) buffer MaterialBuffer {
  Material materials[];
};

layout(set = 0, binding = 2, std430) buffer EntityMetadataBuffer {
  EntityMetadata metadatas[];
};

layout(set = 1, binding = 0) uniform
    accelerationStructureEXT scene;  // Built in attribute, don't need to define

layout(set = 2, binding = 0, std430) buffer VertexBuffers {
  float vertex_data[];
}
vertex_buffers[];

layout(set = 2, binding = 1, std430) buffer IndexBuffers {
  uint indices[];
}
index_buffers[];

layout(set = 2, binding = 2) buffer AreaCDFBuffers {
  float area_cdfs[];
}
mesh_cdf_buffers[];

layout(set = 2, binding = 3, std430) buffer MeshMetadataBuffers {
  MeshMetadata mesh_metadatas[];
};

layout(set = 2, binding = 4) uniform texture2D sampled_textures[];

layout(set = 2, binding = 5) uniform sampler samplers[];

#define ENVMAP_SET 3
#include "envmap.glsl"

layout(set = ENVMAP_SET, binding = 2, std430) buffer EnvmapCdfData {
  float envmap_cdf[];
};

#include "random.glsl"

layout(set = 4, binding = 0, rgba8) uniform image2D result_image;

layout(set = 4,
       binding = 1,
       rgba32f) uniform image2D accumulated_radiance_image;

layout(set = 4, binding = 2, r32f) uniform image2D accumulated_weight_image;

layout(set = 4, binding = 3, rgba32f) uniform image2D raw_result_image;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

#include "hit_record.glsl"
#include "shadow_ray.glsl"
#include "trace_ray.glsl"

vec4 SampleTextureLinear(uint texture_id, vec2 uv) {
  return texture(sampler2D(sampled_textures[texture_id], samplers[0]), uv);
}

vec4 SampleTextureNearest(uint texture_id, vec2 uv) {
  return texture(sampler2D(sampled_textures[texture_id], samplers[1]), uv);
}

vec3 EnvmapSample(vec3 direction) {
  return texture(
             sampler2D(sampled_textures[envmap_data.envmap_id], samplers[0]),
             SampleEnvmapUV(direction))
             .xyz *
         envmap_data.scale;
}

Material GetMaterial(HitRecord hit_record) {
  Material material = materials[hit_record.entity_id];
  material.normal = normalize(mat3(hit_record.tangent, hit_record.bitangent,
                                   hit_record.shading_normal) *
                              ((material.normal - 0.5) * 2.0));
  material.base_color *=
      SampleTextureLinear(hit_record.albedo_texture_id, hit_record.tex_coord)
          .xyz *
      SampleTextureLinear(
          hit_record.albedo_detail_texture_id,
          hit_record.tex_coord * hit_record.detail_scale_offset.xy +
              hit_record.detail_scale_offset.zw)
          .xyz;
  return material;
}

vec3 UniformSampleHemisphere(vec3 normal) 
{
    float u1 = float(RandomUint()) / float(0xFFFFFFFFu);
    float u2 = float(RandomUint()) / float(0xFFFFFFFFu);

    float theta = 0.5 * PI * u1; 
    float phi = 2.0 * PI * u2;     

    vec3 local_dir = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));

    vec3 tangent = normalize(cross(abs(normal.x) > 0.1 ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0), normal));
    vec3 bitangent = cross(normal, tangent);

    return local_dir.x * tangent + local_dir.y * bitangent + local_dir.z * normal;
}
vec3 UniformSampleTriangle(vec3 v0, vec3 v1, vec3 v2) 
{
    float u1 = RandomFloat();
    float u2 = RandomFloat();
    float sqrt_u1 = sqrt(u1);
    float b0 = 1.0 - sqrt_u1;
    float b1 = sqrt_u1 * (1.0 - u2);
    float b2 = sqrt_u1 * u2;
    return b0 * v0 + b1 * v1 + b2 * v2;
}
float TriangleArea(vec3 v0, vec3 v1, vec3 v2) 
{
    vec3 e1 = v1 - v0; 
    vec3 e2 = v2 - v0; 
    return 0.5 * length(cross(e1, e2)); 
}
vec3 TriangleNormal(vec3 v0, vec3 v1, vec3 v2) {
    vec3 e1 = v1 - v0; 
    vec3 e2 = v2 - v0; 
    return normalize(cross(e1, e2)); 
}
struct LightSamplePoint
{
  vec3 position; 
  uint mesh_id, primitive_id; 
  float pdf; 
};
struct SamplePoint
{
  vec3 position;
  float pdf; 
};

SamplePoint CosineSampleHemisphere(vec3 normal)
{
    float u1 = float(RandomUint()) / float(0xFFFFFFFFu);
    float u2 = float(RandomUint()) / float(0xFFFFFFFFu);

    float r = sqrt(u1);
    float theta = 2.0 * PI * u2;

    float x = r * cos(theta);
    float y = r * sin(theta);
    float z = sqrt(1.0 - u1);

    vec3 local_dir = vec3(x, y, z);

    vec3 tangent = normalize(cross(abs(normal.x) > 0.1 ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0), normal));
    vec3 bitangent = cross(normal, tangent);

    SamplePoint ret;
    ret.position = local_dir.x * tangent + local_dir.y * bitangent + local_dir.z * normal;
    ret.position = normalize(ret.position);
    ret.pdf = z / PI; // Cosine-weighted hemisphere PDF
    return ret;
};

LightSamplePoint SampleDirectLighting() 
{
  float u = RandomFloat();
  uint entity_id = 0; 
  for(; entity_id < scene_settings.num_entity; entity_id++)
    if(metadatas[entity_id].emission_cdf > u)break; 
  uint mesh_id = metadatas[entity_id].mesh_id; 
  u = RandomFloat();
  int primitive_id = 0; 
  for(; primitive_id < mesh_metadatas[mesh_id].num_index / 3; primitive_id++)
    if(mesh_cdf_buffers[mesh_id].area_cdfs[primitive_id] > u)break; 
  uint v0_id = index_buffers[mesh_id].indices[primitive_id * 3 + 0]; 
  uint v1_id = index_buffers[mesh_id].indices[primitive_id * 3 + 1]; 
  uint v2_id = index_buffers[mesh_id].indices[primitive_id * 3 + 2]; 
  Vertex v0 = GetVertex(mesh_id, v0_id); 
  Vertex v1 = GetVertex(mesh_id, v1_id); 
  Vertex v2 = GetVertex(mesh_id, v2_id); 
  vec3 v = UniformSampleTriangle(v0.position, v1.position, v2.position); 
  LightSamplePoint ret; 
  ret.position = v; 
  ret.mesh_id = mesh_id; 
  ret.primitive_id = primitive_id; 
  int pre_entity_id = 0;
  for(; pre_entity_id < entity_id; pre_entity_id++)
    if(metadatas[pre_entity_id].emission_cdf > 0.0)break; 
  float entity_pdf = metadatas[entity_id].emission_cdf - ((pre_entity_id == entity_id) ? 0 : metadatas[pre_entity_id].emission_cdf); 
  float mesh_pdf = mesh_cdf_buffers[mesh_id].area_cdfs[primitive_id] - ((primitive_id == 0) ? 0 : mesh_cdf_buffers[mesh_id].area_cdfs[primitive_id - 1]); 
  ret.pdf = entity_pdf * mesh_pdf / TriangleArea(v0.position, v1.position, v2.position); 
  return ret; 
}
vec3 ReflectionDirection(vec3 normal, vec3 direction)
{
  if(dot(normal, direction) > 0)normal = -normal; 
  return -dot(normal, direction) * normal * 2 + direction; 
}
vec3 RefractionDirection(vec3 normal, vec3 direction, float ior, float inside) 
{
    direction = normalize(direction);
    normal = normalize(normal);
    float eta = (inside > 1e-3) ? (1.0 / ior) : ior;
    float cosThetaI = dot(normal, direction);

    if (cosThetaI < 0) {
        cosThetaI = -cosThetaI; 
    } else {
        normal = -normal; 
    }
    float k = 1.0 - eta * eta * (1.0 - cosThetaI * cosThetaI);
    if (k < 0.0) {
        return vec3(0.0, 0.0, 0.0);
    }
    return eta * direction + (eta * cosThetaI - sqrt(k)) * normal;
}
float SchlickApproximation(float cosTheta, float ior1, float ior2) 
{
    float R0 = pow((ior1 - ior2) / (ior1 + ior2), 2.0);
    float eta = ior1 / ior2;
    float sin2ThetaT = eta * eta * (1.0 - cosTheta * cosTheta);
    if (sin2ThetaT > 1.0) {
        return 1.0;
    }

    return R0 + (1.0 - R0) * pow(1.0 - cosTheta, 5.0);
}
vec3 SampleRay(vec3 origin, vec3 direction)
{
  vec3 radiance = vec3(0.0); 
  vec3 throughput = vec3(1.0); 
  vec3 hit_point, normal, base_color;

  float inside = 0.0; 
  TraceRay(origin, direction);  
  /*No hit Case*/
  if (ray_payload.t == -1.0) {
    radiance += throughput * EnvmapSample(direction);
    return radiance; 
  }

  /*Direct Illumumination*/     
  hit_record = ComposeHitRecord(ray_payload, origin, direction);
  material = GetMaterial(hit_record);
  if(material.emission_strength > 1e-4)
  {
    radiance += throughput * material.emission * material.emission_strength; 
    return radiance; 
  }
  normal = hit_record.shading_normal; 
  float cos_theta = dot(-direction, normal);
  vec3 brdf = material.base_color; 

  throughput *= brdf * cos_theta / PI;
  origin = hit_record.position + normal * 1e-4;

  for (int depth = 0; depth < scene_settings.num_bounces; depth++) 
  {
    if(material.type == MATERIAL_TYPE_LAMBERTIAN)
    {
      /*1.LightSource*/
      LightSamplePoint light_sample_point = SampleDirectLighting(); 
      float r = distance(origin, light_sample_point.position); 
      vec3 new_direction = normalize(light_sample_point.position - origin); 
      if(ShadowRay(origin, new_direction, r) > 1e-3)
      {
        TraceRay(origin, new_direction);  
        hit_record = ComposeHitRecord(ray_payload, origin, new_direction);
        material = GetMaterial(hit_record);
        radiance += throughput * material.emission * material.emission_strength * dot(normal, new_direction) * (-dot(hit_record.shading_normal, new_direction)) / (r*r) / light_sample_point.pdf;  
      }
      
      /*2.Lambert*/
      SamplePoint samplepoint = CosineSampleHemisphere(normal); 
      new_direction = samplepoint.position; 
      TraceRay(origin, new_direction); 
      /*2.1 No hit*/ 
      if (ray_payload.t == -1.0) {
          radiance += throughput * EnvmapSample(new_direction) / samplepoint.pdf;
          break; 
      } 
      /*2.2 Accumulation*/    
      hit_record = ComposeHitRecord(ray_payload, origin, new_direction);
      material = GetMaterial(hit_record);
      if(material.emission_strength < 1e-4)
      {
        float cos_theta = dot(new_direction, normal);
        vec3 brdf = material.base_color; 
        throughput *= brdf * cos_theta / PI;
        origin = hit_record.position + new_direction * 1e-4;
        direction = new_direction; 
        normal = hit_record.shading_normal; 
      }
      else
        break; 
    }
    else if(material.type == MATERIAL_TYPE_SPECULAR)
    {
      vec3 new_direction = ReflectionDirection(normal, direction); 
      TraceRay(origin, new_direction);  
      if (ray_payload.t == -1.0) {
          radiance += throughput * EnvmapSample(new_direction);
          break; 
      }  

      hit_record = ComposeHitRecord(ray_payload, origin, new_direction);
      material = GetMaterial(hit_record);

      if(material.emission_strength > 1e-4)
      {
        radiance += throughput * material.emission * material.emission_strength * (-dot(hit_record.shading_normal, new_direction)); 
        return radiance; 
      }
      float cos_theta = -dot(new_direction, hit_record.shading_normal);
      vec3 brdf = material.base_color; 
      throughput *= brdf * cos_theta; 

      origin = hit_record.position + new_direction * 1e-4;
      direction = new_direction; 
      normal = hit_record.shading_normal; 
    }
    else if(material.type == MATERIAL_TYPE_RETRACTIVE)
    {
      vec3 reflection_direction = ReflectionDirection(normal, direction); 
      float cos_theta = -dot(direction, normal);
      float ior1 = ((inside < 1e-3) ? 1.0 : material.ior); 
      float ior2 = ((inside > 1e-3) ? 1.0 : material.ior); 
      vec3 retraction_direction = RefractionDirection(normal, direction, material.ior, inside); 
      float ratio = SchlickApproximation(cos_theta, ior1, ior2); 
      if(RandomFloat() <= ratio) //Reflection
      {
        throughput /= ratio; 
        vec3 new_direction = reflection_direction; 
        TraceRay(origin, new_direction);  
        if (ray_payload.t == -1.0) {
            radiance += throughput * EnvmapSample(new_direction);
            break; 
        }  

        hit_record = ComposeHitRecord(ray_payload, origin, new_direction);
        material = GetMaterial(hit_record);

        if(material.emission_strength > 1e-4)
        {
          radiance += throughput * material.emission * material.emission_strength * (-dot(hit_record.shading_normal, new_direction)); 
          return radiance; 
        }
        float cos_theta = -dot(new_direction, hit_record.shading_normal);
        vec3 brdf = material.base_color; 
        throughput *= brdf * cos_theta; 

        origin = hit_record.position + new_direction * 1e-4;
        direction = new_direction; 
        normal = hit_record.shading_normal; 
      }
      else 
      {
        throughput /= (1 - ratio); 
        vec3 new_direction = retraction_direction; 
        TraceRay(origin, new_direction);  
        if (ray_payload.t == -1.0) {
            radiance += throughput * EnvmapSample(new_direction);
            break; 
        }  

        hit_record = ComposeHitRecord(ray_payload, origin, new_direction);
        material = GetMaterial(hit_record);

        if(material.emission_strength > 1e-4)
        {
          radiance += throughput * material.emission * material.emission_strength * (-dot(hit_record.shading_normal, new_direction)); 
          return radiance; 
        }
        float cos_theta = -dot(new_direction, hit_record.shading_normal);
        vec3 brdf = material.base_color; 
        throughput *= brdf * cos_theta; 

        origin = hit_record.position + new_direction * 1e-4;
        direction = new_direction; 
        normal = hit_record.shading_normal; 
        inside = ((inside < 1e-3) ? 1.0 : 0.0); 
      }
    }
  }
  return radiance;
}
/*
vec3 SampleRay(vec3 origin, vec3 direction)
{
  vec3 radiance = vec3(0.0); 
  vec3 throughput = vec3(1.0); 
  vec3 hit_point, normal, base_color;
  float t;
    
  for (int depth = 0; depth < scene_settings.num_bounces; depth++) 
  {
    TraceRay(origin, direction); 
    if (ray_payload.t == -1.0) {
      radiance += throughput * EnvmapSample(direction);
      break; 
    }
    hit_record = ComposeHitRecord(ray_payload, origin, direction);
    material = GetMaterial(hit_record);
    //float r = 0.01 * distance(origin, hit_record.position); 
    if(material.emission_strength > 0.0)
    {
      radiance += throughput * material.emission * material.emission_strength * (-dot(hit_record.shading_normal, direction)); 
      break;
    }
    if(material.type == MATERIAL_TYPE_LAMBERTIAN)
    {
      vec3 new_direction = UniformSampleHemisphere(hit_record.shading_normal);
      float cos_theta = dot(new_direction, hit_record.shading_normal);
      vec3 brdf = material.base_color; 
      throughput *= brdf * cos_theta; // /(2*PI) * 2 * PI

      origin = hit_record.position + new_direction * 1e-4;
      direction = new_direction; 
    }
    else if(material.type == MATERIAL_TYPE_SPECULAR)
    {
      vec3 new_direction = ReflectionDirection(hit_record.shading_normal, direction); 
      float cos_theta = dot(new_direction, hit_record.shading_normal);
      vec3 brdf = material.base_color; 
      throughput *= brdf * cos_theta; // /(2*PI) * 2 * PI

      origin = hit_record.position + hit_record.shading_normal * 1e-4;
      direction = new_direction; 
    }
  }
  return radiance;
}
*/
void main() {
  for (uint i = 0; i < scene_settings.num_sample; i++) {
    uint s = scene_settings.accumulated_sample + i;
    InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y, s);
    const vec2 pixelCenter =
        vec2(gl_LaunchIDEXT.xy) + vec2(RandomFloat(), RandomFloat());
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    mat4 proj = scene_settings.projection;
    proj[0][0] = 1.0 / proj[0][0];
    proj[1][1] = 1.0 / proj[1][1];

    vec4 origin = scene_settings.inv_view[3];  // * vec4(0, 0, 0, 1);
    vec4 target = vec4(d.x, -d.y, 0, 1) * proj;
    vec4 direction = scene_settings.inv_view * vec4(normalize(target.xyz), 0);

    float tmin = 0.001;
    float tmax = 10000.0;

    ray_payload.t = -1.0;
    vec3 sampled_result = SampleRay(origin.xyz, direction.xyz);

    sampled_result = clamp(sampled_result, -scene_settings.clamp_value,
                           scene_settings.clamp_value);

    vec4 accumulated_radiance = vec4(0.0);
    float accumulated_weight = 0.0f;
    accumulated_radiance =
        imageLoad(accumulated_radiance_image, ivec2(gl_LaunchIDEXT.xy));
    accumulated_weight =
        imageLoad(accumulated_weight_image, ivec2(gl_LaunchIDEXT.xy)).r;

    accumulated_radiance *= scene_settings.persistence;
    accumulated_weight *= scene_settings.persistence;

    if (isnan(accumulated_weight) || isnan(accumulated_radiance.r) ||
        isnan(accumulated_radiance.g) || isnan(accumulated_radiance.b) ||
        isnan(accumulated_radiance.a)) {
      accumulated_weight = 0.0;
      accumulated_radiance = vec4(0.0);
    }

    accumulated_radiance += vec4(sampled_result, 1.0);
    accumulated_weight += 1.0f;

    vec4 raw_result = accumulated_radiance / accumulated_weight;

    vec4 resolved_result = pow(scene_settings.exposure * raw_result,
                               vec4(1.0 / scene_settings.gamma));

    imageStore(result_image, ivec2(gl_LaunchIDEXT.xy),
               vec4(resolved_result.rgb, 1.0));
    imageStore(accumulated_radiance_image, ivec2(gl_LaunchIDEXT.xy),
               accumulated_radiance);
    imageStore(accumulated_weight_image, ivec2(gl_LaunchIDEXT.xy),
               vec4(accumulated_weight));
    imageStore(raw_result_image, ivec2(gl_LaunchIDEXT.xy), raw_result);
  }
}
