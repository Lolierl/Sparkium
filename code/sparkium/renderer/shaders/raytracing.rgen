#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_ray_query : enable

#include "entity_metadata.glsl"
#include "material.glsl"
#include "mesh_metadata.glsl"
#include "ray_payload.glsl"
#include "scene_settings.glsl"
#include "color.glsl"

Material material;

layout(set = 0, binding = 0, std140) uniform SceneSettingsUniform {
  SceneSettings scene_settings;
};

layout(set = 0, binding = 1, std430) buffer MaterialBuffer {
  Material materials[];
};

layout(set = 0, binding = 2, std430) buffer EntityMetadataBuffer {
  EntityMetadata metadatas[];
};

layout(set = 1, binding = 0) uniform
    accelerationStructureEXT scene;  // Built in attribute, don't need to define

layout(set = 2, binding = 0, std430) buffer VertexBuffers {
  float vertex_data[];
}
vertex_buffers[];

layout(set = 2, binding = 1, std430) buffer IndexBuffers {
  uint indices[];
}
index_buffers[];

layout(set = 2, binding = 2) buffer AreaCDFBuffers {
  float area_cdfs[];
}
mesh_cdf_buffers[];

layout(set = 2, binding = 3, std430) buffer MeshMetadataBuffers {
  MeshMetadata mesh_metadatas[];
};

layout(set = 2, binding = 4) uniform texture2D sampled_textures[];

layout(set = 2, binding = 5) uniform sampler samplers[];

#define ENVMAP_SET 3
#include "envmap.glsl"

layout(set = ENVMAP_SET, binding = 2, std430) buffer EnvmapCdfData {
  float envmap_cdf[];
};  
   
#include "random.glsl"

layout(set = 4, binding = 0, rgba8) uniform image2D result_image;

layout(set = 4,
       binding = 1,
       rgba32f) uniform image2D accumulated_radiance_image;

layout(set = 4, binding = 2, r32f) uniform image2D accumulated_weight_image;

layout(set = 4, binding = 3, rgba32f) uniform image2D raw_result_image;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

float spectrum_cdf[81] = float[](
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0
);

#include "hit_record.glsl"
#include "shadow_ray.glsl"
#include "trace_ray.glsl"
#include "sample.glsl"
#include "bxdf.glsl"
#include "lighting.glsl"

  
Material GetMaterial(HitRecord hit_record) { 
  Material material = materials[hit_record.entity_id];
  /*material.normal = normalize(mat3(hit_record.tangent, hit_record.bitangent,
                                   hit_record.shading_normal) *
                              ((material.normal - 0.5) * 2.0)); */
  material.base_color *=
      SampleTextureLinear(hit_record.albedo_texture_id, hit_record.tex_coord)
          .xyz *
      SampleTextureLinear(
          hit_record.albedo_detail_texture_id,
          hit_record.tex_coord * hit_record.detail_scale_offset.xy +
              hit_record.detail_scale_offset.zw)
          .xyz;
  material.roughness *= 
     SampleTextureLinear(hit_record.roughness_texture_id, hit_record.tex_coord)[0]; 
  material.normal = hit_record.geometry_normal; 

  if(hit_record.normal_texture_id != 0.0)
  {
    vec3 tangent_normal = SampleTextureLinear(hit_record.normal_texture_id, hit_record.tex_coord).xyz;
    tangent_normal = normalize(tangent_normal);  
    mat3 TBN = mat3(hit_record.tangent, hit_record.bitangent, hit_record.shading_normal);
    material.normal = normalize(TBN * tangent_normal);
  } 
  return material;
} 


vec3 SampleRay(vec3 origin, vec3 direction)
{
  vec3 radiance = vec3(0.0); 
  vec3 throughput = vec3(1.0); 
  vec3 hit_point, normal; 
  vec3 bxdf = vec3(1.0);
  
  float RR = 0.1; 
  float inside = 0.0;
  TraceRay(origin, direction);  

  /*Sample WaveLength*/
  WaveLengthWithPDF spectrum = SampleWaveLength();

  /*No hit Case*/
  if (ray_payload.t == -1.0) {
    radiance += throughput * EnvmapSample(direction);
    return radiance; 
  }

  /*Direct Illumumination*/     
  hit_record = ComposeHitRecord(ray_payload, origin, direction);
  material = GetMaterial(hit_record);
  normal = hit_record.geometry_normal;
  origin = hit_record.position; 
  if(material.emission_strength > 1e-4 && material.type != MATERIAL_TYPE_VOLUME) {
    float light_strength = CalculateLightStrength(material, origin, direction, hit_record.geometry_normal, spectrum.wave_length);
    radiance += throughput * light_strength * WaveLengthToRGB(spectrum.wave_length) / spectrum.pdf;
    return radiance; 
  }
 
  /*Hit an entity A*/ 
  float cos_theta = 1.0f;
 
  for (int depth = 0; depth < scene_settings.num_bounces; depth++) 
  {
    if(dot(normal, direction) > 0)
      normal = -normal; 
    if(throughput[0] < 0.2 && throughput[1] < 0.2 && throughput[2] < 0.2)
    {
      if(RandomFloat() <= RR)
        break; 
      else
        throughput /= (1 - RR);
    }
    bool is_LAMBERTIAN = (material.type == MATERIAL_TYPE_LAMBERTIAN); 
    bool is_VOLUME = (material.type == MATERIAL_TYPE_VOLUME);
    
    /*Direct Illumination*/
    if(material.emission_strength > 1e-4 && material.type != MATERIAL_TYPE_VOLUME)
    {
      float light_strength = CalculateLightStrength(material, origin, direction, hit_record.geometry_normal, spectrum.wave_length);
      radiance += throughput * light_strength * WaveLengthToRGB(spectrum.wave_length) / spectrum.pdf;
      return radiance; 
    } 

    /*1. Volumetric case*/
    if (is_VOLUME)
    {
      TraceRay(origin + direction * 1e-4, direction);
      if (ray_payload.t == -1.0) {
        radiance += throughput * EnvmapSample(direction);
        break;
      }  
      hit_record = ComposeHitRecord(ray_payload, origin + direction * 1e-4, direction);
      material = GetMaterial(hit_record);
      if (material.type != MATERIAL_TYPE_VOLUME) {
        origin = hit_record.position;
        normal = material.normal;
        continue;
      }
      float t_max = SampleDistance(material);
      if (ShadowRay(origin + direction * 1e-4, direction, t_max) < 1e-3)
      {
        origin = hit_record.position;
        normal = material.normal;
        continue;
      }
      if(RandomFloat() <= material.sigma_a / (material.sigma_a + material.sigma_s)) {
        float light_strength = CalculateLightStrength(material, origin, direction, hit_record.geometry_normal, spectrum.wave_length);
        radiance += throughput * light_strength * WaveLengthToRGB(spectrum.wave_length) / spectrum.pdf;
        return radiance;
      } else {
        origin = origin + direction * t_max;
        direction = SamplePhaseFunction(material, direction);
        continue;
      }  
    }      
     
    /*2. LightSource -> entity A -> eye (Special Treatment for Lambertian material)*/
    /*if(is_LAMBERTIAN)
    {   
      LightSamplePoint light_sample_point = SampleDirectLighting(origin);
      float r = distance(origin, light_sample_point.position); 
      vec3 new_direction = normalize(light_sample_point.position - origin);
      if(dot(normal, new_direction) < 0)break; 
      bxdf = CalculateBxDF(material, new_direction, direction, normal, inside);
      if(ShadowRay(origin + new_direction * 1e-4, new_direction, r) > 1e-3)
      {  
        TraceRay(origin + new_direction * 1e-4, new_direction);  
        hit_record = ComposeHitRecord(ray_payload, origin + new_direction * 1e-4, new_direction);
        Material light_material = GetMaterial(hit_record);
        cos_theta = dot(normal, new_direction);
        radiance += throughput * bxdf * cos_theta * light_material.emission * light_material.emission_strength * (-dot(material.normal, new_direction)) / (r*r) / light_sample_point.pdf;  
      }  
    }*/    
        
 
    /*2. Else -> entity A -> eye*/
    SampleDirection sample_direction = SampleTransportDirection(origin, material, direction, normal, inside, spectrum.wave_length); 
    vec3 new_direction = sample_direction.direction;
    bxdf = CalculateBxDF(material, direction, new_direction, normal, inside, spectrum.wave_length);
    if(dot(new_direction, normal) < 0)
      inside = 1.0 - inside; 
    cos_theta = abs(dot(new_direction, normal));
    throughput *= max(bxdf * cos_theta / sample_direction.pdf, vec3(0.0));
    TraceRay(origin + new_direction * 1e-4, new_direction);
  
    /*3.1 Else = No hit*/   
    if (ray_payload.t == -1.0) {
      radiance += throughput  * EnvmapSample(new_direction);
      break;
    }  
 
    /*3.2 Else = entity B. Do Recursion*/    
    hit_record = ComposeHitRecord(ray_payload, origin + new_direction * 1e-4, new_direction);
    material = GetMaterial(hit_record);
    if(material.emission_strength > 1e-4 && material.type != MATERIAL_TYPE_VOLUME) {
      float light_strength = CalculateLightStrength(material, origin, direction, hit_record.geometry_normal, spectrum.wave_length);
      radiance += throughput * light_strength * WaveLengthToRGB(spectrum.wave_length) / spectrum.pdf;
      break; 
    } else  
    {
      origin = hit_record.position;
      direction = new_direction; 
      normal = material.normal; 
    }
  }
  return radiance;
}
void main() {
  /*Calculate the spectrum cdf here*/
  for(uint j = 0; j < scene_settings.num_entity;j++) {
    float emission_pdf = (j == 0) ? metadatas[j].emission_cdf : (metadatas[j].emission_cdf - metadatas[j - 1].emission_cdf);
    Material emission_material = materials[j]; 
    for (int i = 0; i < 81; i++) {
      if (emission_material.spectrum_type == SPECTRUM_TYPE_D65) {
        spectrum_cdf[i] += emission_pdf * D65_spectrum[i] / D65_spectrum[80];
      }
      else if (emission_material.spectrum_type == SPECTRUM_TYPE_D75) {
        spectrum_cdf[i] += emission_pdf * D75_spectrum[i] / D75_spectrum[80];
      }
      else if (emission_material.spectrum_type == SPECTRUM_TYPE_D50) {
        spectrum_cdf[i] += emission_pdf * D50_spectrum[i] / D50_spectrum[80];
      }
      else if (emission_material.spectrum_type == SPECTRUM_TYPE_SODIUM) {
        spectrum_cdf[i] += emission_pdf * sodium_spectrum[i] / sodium_spectrum[80];
      }
    }
  }
  for (uint i = 0; i < scene_settings.num_sample; i++) {
    uint s = scene_settings.accumulated_sample + i;
    InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y, s);
    const vec2 pixelCenter =
        vec2(gl_LaunchIDEXT.xy) + vec2(RandomFloat(), RandomFloat());
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    mat4 proj = scene_settings.projection;
    proj[0][0] = 1.0 / proj[0][0];
    proj[1][1] = 1.0 / proj[1][1];

    vec4 origin = scene_settings.inv_view[3];  // * vec4(0, 0, 0, 1);
    vec4 target = vec4(d.x, -d.y, 0, 1) * proj;
    vec4 direction = scene_settings.inv_view * vec4(normalize(target.xyz), 0);

    float tmin = 0.001;
    float tmax = 10000.0; 

    ray_payload.t = -1.0;

    vec3 sampled_result = SampleRay(origin.xyz, direction.xyz);

    sampled_result = clamp(sampled_result, -scene_settings.clamp_value,
                           scene_settings.clamp_value);

    vec4 accumulated_radiance = vec4(0.0);
    float accumulated_weight = 0.0f;
    accumulated_radiance =
        imageLoad(accumulated_radiance_image, ivec2(gl_LaunchIDEXT.xy));
    accumulated_weight =
        imageLoad(accumulated_weight_image, ivec2(gl_LaunchIDEXT.xy)).r;

    accumulated_radiance *= scene_settings.persistence;
    accumulated_weight *= scene_settings.persistence;

    if (isnan(accumulated_weight) || isnan(accumulated_radiance.r) ||
        isnan(accumulated_radiance.g) || isnan(accumulated_radiance.b) ||
        isnan(accumulated_radiance.a)) {
      accumulated_weight = 0.0;
      accumulated_radiance = vec4(0.0);
    }

    accumulated_radiance += vec4(sampled_result, 1.0);
    accumulated_weight += 1.0f;

    vec4 raw_result = accumulated_radiance / accumulated_weight;

    vec4 resolved_result = pow(scene_settings.exposure * raw_result,
                               vec4(1.0 / scene_settings.gamma));

    imageStore(result_image, ivec2(gl_LaunchIDEXT.xy),
               vec4(resolved_result.rgb, 1.0));
    imageStore(accumulated_radiance_image, ivec2(gl_LaunchIDEXT.xy),
               accumulated_radiance);
    imageStore(accumulated_weight_image, ivec2(gl_LaunchIDEXT.xy),
               vec4(accumulated_weight));
    imageStore(raw_result_image, ivec2(gl_LaunchIDEXT.xy), raw_result);
  }
}
